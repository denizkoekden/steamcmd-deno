name: Build and Release

on:
  push:
    branches:
      - release

permissions:
  contents: write

jobs:
  release:
    name: Create Release and Build
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v4

    # Set up Deno environment
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v2.0.0

    - name: Get Latest Tag
      id: get_latest_tag
      run: |
        git fetch --tags
        TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
        echo "Latest tag: $TAG"
        echo "LATEST_TAG=$TAG" >> $GITHUB_OUTPUT

    - name: Bump Version
      id: bump_version
      run: |
        latest_version=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        if [[ "$latest_version" == "v0.0.0" ]]; then
          new_version="v1.0.0"
        else
          new_version=$(echo $latest_version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        fi
        echo "New version: $new_version"
        echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

    # Create a release using GitHub CLI
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.bump_version.outputs.NEW_VERSION }} --title "Release ${{ steps.bump_version.outputs.NEW_VERSION }}" --notes "Automated release."

    # Build for macOS (x86)
    - name: Build for macOS (x86)
      run: deno task build_mac_x86

    # Build for macOS (ARM)
    - name: Build for macOS (ARM)
      run: deno task build_mac_arm

    # Build for Windows
    - name: Build for Windows (x86_64)
      run: deno task build_win

    # Build for Linux (x86)
    - name: Build for Linux (x86_64)
      run: deno task build_linux_x86

    # Build for Linux (ARM)
    - name: Build for Linux (ARM)
      run: deno task build_linux_arm

    # Install GitHub CLI
    - name: Install GitHub CLI
      run: sudo apt-get install gh

    # Upload release assets using GitHub CLI
    - name: Upload macOS (x86) build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ steps.bump_version.outputs.NEW_VERSION }} bin/steamcmd_mac_amd64 --clobber

    - name: Upload macOS (ARM) build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ steps.bump_version.outputs.NEW_VERSION }} bin/steamcmd_mac_arm --clobber

    - name: Upload Windows build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ steps.bump_version.outputs.NEW_VERSION }} bin/steamcmd_win64.exe --clobber

    - name: Upload Linux (x86_64) build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ steps.bump_version.outputs.NEW_VERSION }} bin/steamcmd_linux_amd64 --clobber

    - name: Upload Linux (ARM) build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload ${{ steps.bump_version.outputs.NEW_VERSION }} bin/steamcmd_linux_arm --clobber
